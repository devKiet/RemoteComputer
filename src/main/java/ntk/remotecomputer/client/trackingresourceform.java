/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ntk.remotecomputer.client;

import java.awt.Dimension;
import java.io.ObjectInputStream;
import java.net.Socket;
import javax.swing.ImageIcon;
import ntk.remotecomputer.Commons;
import ntk.remotecomputer.server.ResourceInfo;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;

/**
 *
 * @author kiet
 */
public class trackingresourceform extends javax.swing.JFrame {
    private TimeSeries cpuSeries;
    private TimeSeries memorySeries;
    private String ip = null;
    /**
     * Creates new form trackingresourceform
     */
    public trackingresourceform(String ip) {
        initComponents();
        ImageIcon icon = new javax.swing.ImageIcon(getClass().getResource(Commons.ICON_IMG_PATH));
        setIconImage(icon.getImage());
        setLocationRelativeTo(null);
        setSize(850, 550);
        
        this.ip = ip;
        // Create dataset
        TimeSeriesCollection dataset = new TimeSeriesCollection();
        cpuSeries = new TimeSeries("CPU Load");
        memorySeries = new TimeSeries("Used Memory");
        dataset.addSeries(cpuSeries);
        dataset.addSeries(memorySeries);

        // Create chart
        JFreeChart chart = ChartFactory.createTimeSeriesChart(
                "System Resource Usage",
                "Time",
                "Value",
                dataset,
                true,
                true,
                false
        );

        // Customize plot
        XYPlot plot = (XYPlot) chart.getPlot();
        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
        plot.setRenderer(renderer);
        plot.setOrientation(PlotOrientation.VERTICAL);

        // Create ChartPanel and add it to JFrame
        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(800, 600));
        setContentPane(chartPanel);
        
        startClient();
    }
    
    public void startClient() {
        try (Socket socket = new Socket(this.ip, Commons.TRACKING_SOCKET_PORT);
             ObjectInputStream ois = new ObjectInputStream(socket.getInputStream())) {

            while (true) {
                ResourceInfo resourceInfo = (ResourceInfo) ois.readObject();
                updateChart(resourceInfo);
            }
        } catch (Exception e) {
        }
    }

    private void updateChart(ResourceInfo resourceInfo) {
        Second current = new Second();
        cpuSeries.addOrUpdate(current, resourceInfo.getCpuLoad());
        memorySeries.addOrUpdate(current, resourceInfo.getUsedMemory() / (1024 * 1024)); // Convert to MB
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(trackingresourceform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(trackingresourceform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(trackingresourceform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(trackingresourceform.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // new trackingresourceform().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
