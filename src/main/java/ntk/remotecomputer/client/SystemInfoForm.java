/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/AWTForms/Frame.java to edit this template
 */
package ntk.remotecomputer.client;

import java.awt.BorderLayout;
import java.io.DataInputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author AD
 */
public class SystemInfoForm extends java.awt.Frame {
    
    private static Thread backgroundThread = null;
    static String ip;
    static DataInputStream dtinpt;
    private final DefaultCategoryDataset cpuDataset;
    private final JFreeChart cpuChart;
    private final DefaultCategoryDataset ramDataset;
    private final JFreeChart ramChart;

    /**
     * Creates new form SystemInfoForm
     * @param ip
     */
    public SystemInfoForm(String ip) {
        super("Process List");
        setSize(600, 400);
        SystemInfoForm.ip = ip;
        initComponents();
        
        ImageIcon icon = new javax.swing.ImageIcon(getClass().getResource("/ntk/remotecomputer/res/icons8-remote-desktop-96.png"));
        setIconImage(icon.getImage());
        setLocationRelativeTo(null);
        
        backgroundThread = new Thread(new BackgroundTask());
        backgroundThread.start();
        
        tabbedPane.setTitleAt(0, "Process");

        tabbedPane.setTitleAt(1, "Performance");
              
        tabbedPane.setTitleAt(2, "Information");
        inforTextArea.setEditable(false); 
        
        chartTablePanel.setTitleAt(0, "CPU");
        chartTablePanel.setTitleAt(1, "RAM");
        
        cpuDataset = new DefaultCategoryDataset();
        cpuChart = ChartFactory.createLineChart(
            "CPU Usage Line Chart", // Tiêu đề biểu đồ
            "Time", // Label trục x
            "CPU Usage (%)", // Label trục y
            cpuDataset
        );
        ChartPanel chartPanel = new ChartPanel(cpuChart);
        
        ramDataset = new DefaultCategoryDataset();
        ramChart = ChartFactory.createLineChart(
            "RAM Usage Line Chart", // Tiêu đề biểu đồ
            "Time", // Label trục x
            "RAM Usage (GB)", // Label trục y
            ramDataset
        );
        ChartPanel ramCchartPanel = new ChartPanel(ramChart);
        
        cpuPanel.add(chartPanel, BorderLayout.CENTER);
        ramPanel.add(ramCchartPanel, BorderLayout.CENTER);
        
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        processPanel = new javax.swing.JPanel();
        processScrollPanel = new javax.swing.JScrollPane();
        processTable = new javax.swing.JTable();
        hardwarePanel = new javax.swing.JPanel();
        chartTablePanel = new javax.swing.JTabbedPane();
        cpuPanel = new javax.swing.JPanel();
        ramPanel = new javax.swing.JPanel();
        inforPanel = new javax.swing.JPanel();
        inforScrollPanel = new javax.swing.JScrollPane();
        inforTextArea = new javax.swing.JTextArea();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        tabbedPane.setPreferredSize(new java.awt.Dimension(600, 400));

        processPanel.setAutoscrolls(true);
        processPanel.setLayout(new java.awt.BorderLayout());

        processScrollPanel.setAutoscrolls(true);

        processTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        processScrollPanel.setViewportView(processTable);
        processTable.getAccessibleContext().setAccessibleName("");

        processPanel.add(processScrollPanel, java.awt.BorderLayout.CENTER);

        tabbedPane.addTab("tab4", processPanel);

        hardwarePanel.setLayout(new java.awt.BorderLayout());

        chartTablePanel.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        chartTablePanel.setName("CPU"); // NOI18N

        cpuPanel.setLayout(new java.awt.BorderLayout());
        chartTablePanel.addTab("tab1", cpuPanel);

        ramPanel.setLayout(new java.awt.BorderLayout());
        chartTablePanel.addTab("tab2", ramPanel);

        hardwarePanel.add(chartTablePanel, java.awt.BorderLayout.CENTER);

        tabbedPane.addTab("tab5", hardwarePanel);

        inforTextArea.setEditable(false);
        inforTextArea.setColumns(50);
        inforTextArea.setLineWrap(true);
        inforTextArea.setRows(20);
        inforTextArea.setWrapStyleWord(true);
        inforScrollPanel.setViewportView(inforTextArea);

        inforPanel.add(inforScrollPanel);

        tabbedPane.addTab("tab6", inforPanel);

        add(tabbedPane, java.awt.BorderLayout.NORTH);
        tabbedPane.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        this.dispose();
    }//GEN-LAST:event_exitForm
    
    private class BackgroundTask implements Runnable {
        @Override
        public void run() {
            System.out.println("start");
            while (true) { 
                
                try {
                    Thread hardwareThread = new Thread(() -> {
                        try {    
                            Socket socket = new Socket(ip, 8001);
                            receiveSystemResourceInfo(socket);
                        } catch (IOException | JSONException ex) {
                            
                        }
                    });

                    Thread realtimeProcessThread = new Thread(() -> {
                        try {
                            Socket socket = new Socket(ip, 8002);
                            receiveSystemResourceInfo(socket);
                        } catch (IOException | JSONException ex) {

                        }
                    });

                    Thread performanceThread = new Thread(() -> {
                        try {
                            Socket socket = new Socket(ip, 8003);
                            receiveSystemResourceInfo(socket);
                        } catch (IOException | JSONException ex) {
                           
                        }
                    });

                    // Khởi động các luồng
                    hardwareThread.start();
                    realtimeProcessThread.start();
                    performanceThread.start();

                    hardwareThread.join();
                    realtimeProcessThread.join();
                    performanceThread.join();
                } catch (InterruptedException ex) {
                    
                }      
            }
        }
    }
    
    private void receiveSystemResourceInfo(Socket socket) throws IOException, JSONException {
        dtinpt = new DataInputStream(socket.getInputStream());
        String jsonData = dtinpt.readUTF();
        // Chuyển đổi dữ liệu JSON thành đối tượng JSONObject
        JSONObject jsonObject = new JSONObject(jsonData);
        System.out.println(jsonObject);
        if (jsonObject.has("RealtimeProcess")) {
            JSONArray process = jsonObject.getJSONArray("RealtimeProcess");
            updateTableProcessFromJSON(process);
        }
        
        if (inforTextArea.getText().isEmpty() )
        { 
            if (jsonObject.has("HardwareInfo")) {
                JSONObject info = jsonObject.getJSONObject("HardwareInfo");
                updateTableInformationFromJSON(info);
            }    
        }
        
        if (jsonObject.has("Performence")) {
            JSONObject perforJson = jsonObject.getJSONObject("Performence");
            updateTablePerformanceFromJSON(perforJson);
        }
    }
    
    private void updateTableProcessFromJSON(JSONArray jsonProcess) throws JSONException {
        String[][] processData = new String[jsonProcess.length()][4]; // Giả sử có 4 trường dữ liệu: PID, MemoryUsage, Name, Session

        // Lặp qua mỗi phần tử trong mảng JSON
        for (int i = 0; i < jsonProcess.length(); i++) {
            // Lấy đối tượng JSONObject ứng với mỗi phần tử trong mảng
            JSONObject process = jsonProcess.getJSONObject(i);

            // Lấy giá trị của các trường từ đối tượng JSONObject và gán vào mảng processData
            processData[i][0] = process.getString("Name");
            processData[i][1] = process.getString("MemoryUsage");
            processData[i][2] = process.getString("PID");
            processData[i][3] = process.getString("Session");
        }
        String[] columnNames = {"Process Name", "MemoryUsage", "PID", "Session"};
          
        DefaultTableModel model = new DefaultTableModel(processData, columnNames) {
            // Override phương thức isCellEditable() để không cho phép chỉnh sửa nội dung của cell
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; 
            }
        };
        
        processTable.setModel(model);
        // Thiết lập TableRowSorter để cho phép sắp xếp dữ liệu khi click vào header của cột
        processTable.setRowSorter(new TableRowSorter<>(model));
    }
   
    private void updateTableInformationFromJSON(JSONObject jsonObject) throws JSONException{
        String systemInfo = jsonObject.getString("systemInfo");
        inforTextArea.setText(systemInfo);
    }
    
    private void updateTablePerformanceFromJSON(JSONObject jsonObject) throws JSONException{
        double cpu = jsonObject.getDouble("CPU");
        String time = jsonObject.getString("CurrentSecond");
        
        if (cpuDataset.getColumnCount() > 20) {
            Comparable<?> columnKey = cpuDataset.getColumnKey(0); // Lấy khóa của cột đầu tiên
            cpuDataset.removeColumn(columnKey); // Loại bỏ cột đầu tiên
        }
        
        if (ramDataset.getColumnCount() > 20) {
            Comparable<?> columnKey = cpuDataset.getColumnKey(0); // Lấy khóa của cột đầu tiên
            ramDataset.removeColumn(columnKey); // Loại bỏ cột đầu tiên
        }
        
        double ramFree = jsonObject.getDouble("RAMFree");
        double ramTotal = jsonObject.getDouble("RAMTotal");
 
        ramChart.getCategoryPlot().getRangeAxis().setRange(0, ramTotal);
        
        cpuDataset.addValue(cpu, "CPU Usage", time);
        ramDataset.addValue(ramTotal - ramFree, "Ram Usage", time);
        
        tabbedPane.repaint();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SystemInfoForm(ip).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane chartTablePanel;
    private javax.swing.JPanel cpuPanel;
    private javax.swing.JPanel hardwarePanel;
    private javax.swing.JPanel inforPanel;
    private javax.swing.JScrollPane inforScrollPanel;
    private javax.swing.JTextArea inforTextArea;
    private javax.swing.JPanel processPanel;
    private javax.swing.JScrollPane processScrollPanel;
    private javax.swing.JTable processTable;
    private javax.swing.JPanel ramPanel;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
}
